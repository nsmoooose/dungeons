Some things to get done

* TODO Determine how to handle the terrain in memory.
  100*100*100 = 1'000'000 tiles.
  Each tile could have any of the following properties:

  - objects.
  - water?
  - wall info?
  - materials like stone, granite

  So we keep 1M pointers where we can do fast lookups based on x, y and z.
  Most of these points to null.

  A lot of stuff could potentially be shared with the flyweigth pattern.

  1024*1024*100 = 104'857'600 tiles

  This keeps getting ridiculus when increasing the number of tiles in a
  region. The benefits would be the efficient lookup for a specific tile.
  No hashtable needed.

  Every level is a quad tree?
  http://en.wikipedia.org/wiki/Quadtree

  Build a:

  * octree?
  * k-d tree
  * http://en.wikipedia.org/wiki/Spatial_index#Spatial_index

  We could start with something simple. Build a data array with 3 dimensions
  and keep a heightmap to make it easy to find the surface without looping everything
  on a level.

* TODO Container and position of objects
  Each object shouldn't be aware of its position. All that information
  is stored into the octree. In order for an object to get its position
  it must have a pointer to its container (the octree object, or a
  parent container (a box, barrel etc)).

  Apropriate pattern for this?

  One way is that the tile object is the only object with a position.
  So if an object wants its position it will have to query its parent.
  And the parents parent until we get to the tile object. The tile
  object has this information as a "pos" property.

  It would be cool to have this information to be pushed as a channel
  event?
* DONE Translation of the software into several languages.
  A tutorial on how to do this.
  http://oriya.sarovar.org/docs/gettext_single.html
* TODO Handle UTF-8 for gl to get swedish characters.
  http://www.cl.cam.ac.uk/~mgk25/unicode.html#mod
* TODO Embed help as files in the binary?
  Here is a good link on how to do this:
  http://www.linuxjournal.com/content/embedding-file-executable-aka-hello-world-version-5967
* TODO Wire an ui transition to a command object without any callback assigned.
  This makes it possible to do cmd to ui state without a callback with a single
  function call to execute the state change.

  It could be usefull for the cb function to be able to abort the change due to
  some error as well. Or we might wanna assign a cb to the transition object
  instead that checks if the transition is allowed or not.

  We could also provide the state machine with a check that tests each for illegal
  ui state operations.

  Move the transition declaration to the file where the call to d_ui_do_transition
  is done.
* DONE Place menu of list of commands where you want.
  Today this is always rendered at the center of the screen. This should be changed.

* TODO Object: tree
  The first and a simple object.
  A tree has the following parameters:
  - How fast it can spread its seeds.
  - Some kind of logarithmic curve on the growth of the tree.
	How do we control this?
  - How dense it can grow.

  State machine
  - Growing.
  - On fire.
  - Withering/dead
  - Log

  An instance of a tree has the following properties:
  - Age
  - Height
  - Diameter
  - On fire? Damage?
* TODO Accelerate time when doing some development in order to test results.
* DONE Test suite with a coverage report
* TODO emit properties for an object.
  This is a generic way to expose information about an object.

  It should also be possible to get notifications when a property change
  in a kind of subscribe to object.
* TODO Split it up into server and client.
  All communications is done through a file descriptor.
  - A local game is done with a unix socket.
  - A remote game is done with a tcp socket.
* TODO Generate a terrain mesh of the heightmap.
* TODO Handle commands within a ui state?
  So when we are within the gamescreen we do want to be able to
  perform.

  Is it a good idea that every action we perform is its own ui
  state?
  Too much code?

* TODO Path finding algorithms
  http://theory.stanford.edu/~amitp/GameProgramming/

* TODO Render terrain in 3D.
* TODO How to store data
  Large bitmasks for certain data? Would be cool to cover larger terrains
  but that would involve loading tiles of data i guess.

  Things could be split ut in several areas:
  - tunneling, wall info, .
* TODO Behaviors and extending object with new data
  Smart way to extend an object with a behavior. Good programming pattern
  to solve this?

  Examples:
  - containers. A box can contain smaller items.
  - position. Not all objects have a position.
* TODO Behaviours
** TODO Fire
   Fire is an algorithm that works outside of each object. Every object
   that can catch fire should have the following properties:
   - explosivity?
   - ?
* DONE New directory structure
  - doc
  - src
    - tests
    - srv
      - tests
    - ui
      - tests
      - curses
        - tests
      - gl
        - tests
* TODO Experiment with a websocket client javascript version
  This could be a nice way to do multiplayer?
